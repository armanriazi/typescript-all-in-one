[
    {
        "created": "2024-01-12T09:40:36.759Z",
        "name": "tsenum",
        "tags": [
            "enum"
        ],
        "content": "const enum EnumOpenClose{\n    Open = 10,\n    Closed = 20\n   }\n  console.log(`const Closed =${EnumOpenClose.Open}`);",
        "contentType": "typescript"
    },
    {
        "created": "2024-01-12T12:47:46.168Z",
        "name": "tslog",
        "tags": [
            "log",
            "console",
            "print"
        ],
        "content": "console.log(`${$1}`);",
        "contentType": "typescript"
    },
    {
        "created": "2024-01-12T19:40:05.498Z",
        "name": "tstype_guard",
        "tags": [
            "type",
            "typeof",
            "guard",
            "union"
        ],
        "content": "function addWithTypeGuard(\n  arg1: string | number,\n  arg2: string | number\n) {\n  if (typeof arg1 === \"string\"){\n\n  }\n}",
        "contentType": "typescript"
    },
    {
        "created": "2024-01-12T19:42:30.815Z",
        "name": "tstype_alias",
        "tags": [
            "type",
            "alias",
            "pipe"
        ],
        "content": "type StringOrNumber = string | number;",
        "contentType": "typescript"
    },
    {
        "created": "2024-01-12T23:05:43.908Z",
        "name": "tstype_guard_interface",
        "tags": [
            "guard",
            "type",
            "pipe",
            "interface",
            "in"
        ],
        "content": "interface A {\n    x: number;\n  }\n  interface B {\n    y: string;\n  }\n  \n  function doStuff(q: A | B) {\n    if ('x' in q) {}}",
        "contentType": "typescript"
    },
    {
        "created": "2024-01-12T23:11:03.590Z",
        "name": "tstype_guard_class",
        "tags": [
            "type",
            "instanceof",
            "guard",
            "pipe"
        ],
        "content": "class Foo {\n    foo = 123;\n    common = '123';\n}\n\nclass Bar {\n    bar = 123;\n    common = '123';\n}\n\nfunction doStuff(arg: Foo | Bar) {\n    if (arg instanceof Foo) {\n\n    }\n}",
        "contentType": "typescript"
    },
    {
        "created": "2024-01-12T23:24:22.833Z",
        "name": "tsdestructuring_object",
        "tags": [
            "destruct",
            "variable",
            "paranthese"
        ],
        "content": "var {x, y, width, height} = rect;\n({x, y, width, height} = rect); // assign to existing variables using outer parentheses",
        "contentType": "typescript"
    },
    {
        "created": "2024-01-12T23:33:17.938Z",
        "name": "tsdestructuring_object_remaining",
        "tags": [
            "destruct",
            "remain"
        ],
        "content": "var {w, x, ...remaining} = {w: 1, x: 2, y: 3, z: 4};\nconsole.log(w, x, remaining); // 1, 2, {y:3,z:4}",
        "contentType": "typescript"
    },
    {
        "created": "2024-01-12T23:42:42.899Z",
        "name": "tsdestructuring_array_remaining",
        "tags": [
            "array",
            "destruct",
            "remain"
        ],
        "content": "var [x, , ...remaining] = [1, 2, 3, 4];\nconsole.log(x, remaining); // 1, [3,4]",
        "contentType": "typescript"
    },
    {
        "created": "2024-01-12T23:43:48.173Z",
        "name": "tsdestructuring_array",
        "tags": [
            "destruct",
            "array"
        ],
        "content": "var x = 1, y = 2;\n_a = [y,x], x = _a[0], y = _a[1];\nconsole.log(x, y);",
        "contentType": "typescript"
    },
    {
        "created": "2024-01-12T23:45:26.850Z",
        "name": "tsdestructuring_array_exchange",
        "tags": [
            "destruct",
            "array",
            "exchage",
            "variable"
        ],
        "content": "var x = 1, y = 2;\n[x, y] = [y, x];\nconsole.log(x, y); // 2,1",
        "contentType": "typescript"
    },
    {
        "created": "2024-01-13T08:47:58.497Z",
        "name": "tsclosure_container",
        "tags": [
            "closure",
            "container",
            "function",
            "return"
        ],
        "content": "function createCounter() {\n    let val = 0;\n    return {\n        increment() { val++ },\n        getVal() { return val }\n    }\n}\nlet counter = createCounter();\ncounter.increment();\nconsole.log(counter.getVal()); // 1\ncounter.increment();\nconsole.log(counter.getVal()); // 2\n",
        "contentType": "typescript"
    },
    {
        "created": "2024-01-14T09:29:29.386Z",
        "name": "tstype_prop_mapping",
        "tags": [
            "assertion",
            "map",
            "type",
            "macro",
            "prefix",
            "keyof"
        ],
        "content": "type PREFIX<Type> = {\n    [prop in keyof Type as `prefix_${string & prop}`]: () => Type[prop];\n};\ntype X = {\n    a: string;\n    b: number;\n    c: ()=>{}\n};\ntype Y = PREFIX<X>;",
        "contentType": "typescript"
    },
    {
        "created": "2024-01-14T16:08:19.715Z",
        "name": "tserror_never_function",
        "tags": [
            "error",
            "never",
            "throw"
        ],
        "content": "  function fail(message: string): never { throw new Error(message); }",
        "contentType": "typescript"
    },
    {
        "created": "2024-01-14T21:53:59.841Z",
        "name": "tsindex_retrieve_map",
        "tags": [
            "index",
            "map",
            "get",
            "indexOf"
        ],
        "content": "const fooIndex = list.map(i => i.id).indexOf('foo');",
        "contentType": "typescript"
    },
    {
        "created": "2024-01-14T21:55:39.320Z",
        "name": "tstype_structural",
        "tags": [
            "structural",
            "type"
        ],
        "content": "type X = {\n    a: string;\n};\nconst y = { a: 'a', b: 'b' };\nconst x: X = y; // Valid because structural typing\nconst w: X = { a: 'a', b: 'b' }; // Invalid because excess property checking",
        "contentType": "typescript"
    },
    {
        "created": "2024-01-14T21:57:15.116Z",
        "name": "tstype_prop_weak",
        "tags": [
            "type",
            "weak",
            "unknown",
            "prop"
        ],
        "content": "type Options = {\n    [prop: string]: unknown;\n    a?: string;\n    b?: string;\n};\nconst fn = (options: Options) => undefined;\nfn({ c: 'c' }); // Valid",
        "contentType": "typescript"
    },
    {
        "created": "2024-01-15T10:22:12.753Z",
        "name": "tstype_literal_number",
        "tags": [
            "type",
            "literal",
            "pipe"
        ],
        "content": "type OneToFive = 1 | 2 | 3 | 4 | 5;",
        "contentType": "typescript"
    },
    {
        "created": "2024-01-15T10:22:53.927Z",
        "name": "tstype_literal_bool",
        "tags": [
            "literal",
            "type",
            "bool"
        ],
        "content": "type Bools = true | false;",
        "contentType": "typescript"
    },
    {
        "created": "2024-01-15T10:23:28.569Z",
        "name": "tstype_literal_string",
        "tags": [
            "type",
            "literal",
            "string"
        ],
        "content": "type CardinalDirection =\n    | \"North\"\n    | \"East\"\n    | \"South\"\n    | \"West\";",
        "contentType": "typescript"
    },
    {
        "created": "2024-01-15T10:24:35.176Z",
        "name": "tstype_literal_inference",
        "tags": [
            "type",
            "literal",
            "as",
            "inference"
        ],
        "content": "function iTakeFoo(foo: 'foo') { }\nconst test = {\n  someProp: 'foo' as 'foo'\n};\niTakeFoo(test.someProp); ",
        "contentType": "typescript"
    },
    {
        "created": "2024-01-15T10:36:23.342Z",
        "name": "tstype_literal_enum_string",
        "tags": [
            "literal",
            "enum",
            "keyof",
            "typeof"
        ],
        "content": "function strEnum<T extends string>(o: Array<T>): {[K in T]: K} {\n  return o.reduce((res, key) => {\n    res[key] = key;\n    return res;\n  }, Object.create(null));\n}\nconst Direction = strEnum([\n  'North',\n  'South',\n  'East',\n  'West'\n])\ntype Direction = keyof typeof Direction;\n\nlet sample: Direction;\nsample = Direction.North; \nsample = 'North';\n//sample = 'AnythingElse'; // ERROR!",
        "contentType": "typescript"
    },
    {
        "created": "2024-01-15T12:08:51.510Z",
        "name": "tstype_assertion_interface",
        "tags": [
            "type",
            "assertion",
            "as",
            "interface"
        ],
        "content": "interface Foo {\n    bar: number;\n    bas: string;\n}\nvar foo = {} as Foo;\nfoo.bar = 123;\nfoo.bas = 'hello';",
        "contentType": "typescript"
    },
    {
        "created": "2024-01-16T08:33:19.593Z",
        "name": "tstype_array_of_objects",
        "tags": [
            "type",
            "object",
            "array",
            "interface",
            "index"
        ],
        "content": "interface Foo {\n    [x: number]: number;\n}\n\nlet foo: Foo = { 0: 123, 1: 345 };\nconsole.log(foo[0]);   ",
        "contentType": "typescript"
    },
    {
        "created": "2024-01-16T08:52:12.113Z",
        "name": "tstype_readonly_mutate",
        "tags": [
            "type",
            "readonly",
            "mutate",
            "object"
        ],
        "content": "let foo: {readonly bar: number;} = {\n        bar: 123\n    };\nfunction iMutateFoo(foo: { bar: number }) {\n    foo.bar = 456;\n}\niMutateFoo(foo); // The foo argument is aliased by the foo parameter\nconsole.log(foo.bar); // 456!",
        "contentType": "typescript"
    },
    {
        "created": "2024-01-16T08:56:45.246Z",
        "name": "tstype_readonly_immutate",
        "tags": [
            "type",
            "immutate",
            "readonly",
            "interface"
        ],
        "content": "interface Foo {\n    readonly bar: number;\n}\nlet foo: Foo = {\n    bar: 123\n};\nfunction iTakeFoo(foo: Foo) {\n    foo.bar = 456; // Error! bar is readonly\n}\niTakeFoo(foo); // The foo argument is aliased by the foo parameter",
        "contentType": "typescript"
    }
]